import{a as i}from"./chunk-WDSV34T6.mjs";import{a as t}from"./chunk-SAYYBWUX.mjs";import{z as e}from"zod";async function w(d){d.withTypeProvider().post("/events/:eventId/attendees",{schema:{summary:"Register for an event",tags:["events"],body:e.object({name:e.string().min(5),email:e.string().email()}),params:e.object({eventId:e.string().uuid()}),response:{201:e.object({attendeeId:e.number().int()}),409:e.object({message:e.string()}),404:e.object({message:e.string()})}}},async(s,r)=>{let{name:m,email:o}=s.body,{eventId:n}=s.params;if(await t.attendee.findUnique({where:{eventId_email:{eventId:n,email:o}}})!==null)throw new i("Attendee with the same email already exists.");let[a,c]=await Promise.all([t.event.findUnique({where:{id:n}}),t.attendee.count({where:{eventId:n}})]);if(!a)return r.status(404).send({message:"Event not found."});if(a.maximumAttendees!==null&&c>=a.maximumAttendees)throw new i("Maximum attendees reached.");let u=await t.attendee.create({data:{name:m,email:o,eventId:n}});return r.send({attendeeId:u.id})})}export{w as a};
